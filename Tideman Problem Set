#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// preferences[i][j] is number of voters who prefer i over j
int preferences[MAX][MAX];

// locked[i][j] means i is locked in over j
bool locked[MAX][MAX];

// Each pair has a winner, loser
typedef struct
{
    int winner;
    int loser;
}
pair;

// Array of candidates
string candidates[MAX];
pair pairs[MAX * (MAX - 1) / 2];

int pair_count;
int candidate_count;

// Function prototypes
bool vote(int rank, string name, int ranks[]);
void record_preferences(int ranks[]);
void add_pairs(void);
void sort_pairs(void);
void lock_pairs(void);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: tideman [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i] = argv[i + 1];
    }

    // Clear graph of locked in pairs
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            locked[i][j] = false;
        }
    }

    pair_count = 0;
    int voter_count = get_int("Number of voters: ");

    // Query for votes
    for (int i = 0; i < voter_count; i++)
    {
        // ranks[i] is voter's ith preference
        int ranks[candidate_count];

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            if (!vote(j, name, ranks))
            {
                printf("Invalid vote.\n");
                return 3;
            }
        }

        record_preferences(ranks);

        printf("\n");
    }

    add_pairs();
    sort_pairs();
    lock_pairs();
    print_winner();
    return 0;
}

// Update ranks given a new vote
bool vote(int rank, string name, int ranks[])
{
    // TODO

    for (int k = 0; k < candidate_count; k++)
    {
        if (strcmp(name, candidates[k]) == 0)
        {
            ranks[rank] = k;
            printf("Rank%i: %i\n", rank, ranks[rank]);
            return true;
        }
    }
    return false;
}

// Update preferences given one voter's ranks
void record_preferences(int ranks[])
{
    // TODO
    // preferences[i][j] is number of voters who prefer i over j
    // int preferences[MAX][MAX];
    //string candidates[MAX];
    //candidate_count = argc - 1;

    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 1; j < candidate_count - i; j++)
        {
            preferences[ranks[i]][ranks[candidate_count - j]]++;
                printf("preference [%i][%i]: %i\n", ranks[i], ranks[candidate_count - j], preferences[ranks[i]][ranks[candidate_count - j]]);
        }
    }


    return;
}

// Record pairs of candidates where one is preferred over the other
void add_pairs(void)
{
    // TODO
    //include pair only if it has "preferred over another" condition. Do not include if it is a tie.
    printf("Preference[0][1]: %i\nPreference[0][2]: %i\nPreference[1][0]: %i\nPreference[1][2]: %i\nPreference[2][0]: %i\nPreference[2][1]: %i\n",
    preferences[0][1], preferences[0][2], preferences[1][0], preferences[1][2], preferences[2][0], preferences[2][1]);
   

    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0 + i; j < candidate_count; j++)
        {
            if (preferences[i][j] > preferences[j][i])
            {
                pair_count++;
                pairs[pair_count-1].winner = i;
                pairs[pair_count-1].loser = j;
                printf("Pair %i. winner: %i    loser: %i\n", pair_count-1, pairs[pair_count - 1].winner, pairs[pair_count - 1].loser);
            }
            else if (preferences[i][j] < preferences[j][i])
            {
                pair_count++;
                pairs[pair_count-1].winner = j;
                pairs[pair_count-1].loser = i;
                printf("Pair %i. winner: %i    loser: %i\n", pair_count-1, pairs[pair_count - 1].winner, pairs[pair_count - 1].loser);
            }
        }
    }
    return;
}

// Sort pairs in decreasing order by strength of victory


void sort_pairs(void)
{
    // TODO
    pair swap;
    for (int j = 0; j < pair_count; j++)
    {
        for (int k = j + 1; k < pair_count; k++)
        {
            if (preferences[pairs[j].winner][pairs[j].loser] > preferences[pairs[k].winner][pairs[k].loser])
            {
                return;
            }
            else if (preferences[pairs[j].winner][pairs[j].loser] < preferences[pairs[k].winner][pairs[k].loser])
            {
                swap = pairs[j];
                pairs[j] = pairs[k];
                pairs[k] = swap;
            }
        }
    printf("sorted pairs[%i]. Winner: %i Loser: %i\n", j, pairs[j].winner, pairs[j].loser);   
    }
}

   


// Lock pairs into the candidate graph in order, without creating cycles

bool is_cycle = false;
void check_cycle(int n, int i, int p)
{
    is_cycle = false;
    
    for (int j = 0; j < candidate_count; j++)
    {
            if (locked[j][n] == true )
            {
                for (int k = 0; k < candidate_count; k++)
                {
                    
                    if (locked[k][j] == true)
                    {
                        if (k == p)
                        {
                            is_cycle = true;
                            printf("A Cycle!!!!\n");
                            return;
                        }
                        else
                        {
                            n = k;
                            check_cycle(n, i, p);
                        }
                    }
                    else
                        continue;
                }
            }
    }        
            //printf("%s is losing to %s, but wins %s at Pairs[%i]\n", candidates[pairs[n].loser], candidates[pairs[n].winner], candidates[pairs[j].loser], j);
            //n = pairs[k].loser;
            
    return;
}
void lock_pairs(void)
{
    // TODO
    //bool locked[MAX][MAX];
    
    
    for (int i = 0; i < pair_count; i++)
    {
        if (i > 1)
        {
            int n = pairs[i].winner;
            int p = pairs[i].loser;
            printf("Initiate Check Cycle\n");
            check_cycle(n, i, p); 
            if (is_cycle == true)
            {   
                printf("Skipping pair lock\n");
                locked[pairs[i].winner][pairs[i].loser] = false;
               
                printf("locked [%i][%i]: %i\nlocked [%i][%i]: %i\n", pairs[i].winner, pairs[i].loser, (int)locked [pairs[i].winner][pairs[i].loser],
                pairs[i].loser, pairs[i].winner, (int)locked [pairs[i].loser][pairs[i].winner]);
            }
            else
            {
                printf("No cycle. Locking pair. \n");
                locked[pairs[i].winner][pairs[i].loser] = true;
               
                printf("locked [%i][%i]: %i\nlocked [%i][%i]: %i\n", pairs[i].winner, pairs[i].loser, (int)locked [pairs[i].winner][pairs[i].loser],
                pairs[i].loser, pairs[i].winner, (int)locked [pairs[i].loser][pairs[i].winner]);
            }
        }
        
        else
        {
            locked[pairs[i].winner][pairs[i].loser] = true;
            
            printf("locked [%i][%i]: %i\nlocked [%i][%i]: %i\n", pairs[i].winner, pairs[i].loser, (int)locked [pairs[i].winner][pairs[i].loser],
            pairs[i].loser, pairs[i].winner, (int)locked [pairs[i].loser][pairs[i].winner]);
        }
     
    }
    
    return;
}

// Print the winner of the election
void print_winner(void)
{
    // TODO
    //string candidates[MAX];
    int points[candidate_count];
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            if (locked[j][i] == false)
            {
                points[i]++;
                return;
            }
        }
    }
    for (int k = 0; k < candidate_count; k++)
    {
        if (points[k] == candidate_count)
        {
            printf("%s\n", candidates[k]);
        }
    }
  
    
    return;
}
